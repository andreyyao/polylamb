use crate::system_f::{ast, lex, parse::utils};
use ast::{Prog, Expr, RawExpr};

grammar<'a>;

// Using tokens from Logos
extern {
  type Location = usize;
  type Error = lex::LexicalError;
  enum lex::Token<'a> {
    "."         => lex::Token::Dot,
    ","         => lex::Token::Comma,
    ":"         => lex::Token::Colon,
    "="         => lex::Token::Equal,
    "("         => lex::Token::LParen,
    ")"         => lex::Token::RParen,
    "["         => lex::Token::LBrack,
    "]"         => lex::Token::RBrack,
    "|"         => lex::Token::Bar,
    "->"        => lex::Token::Arrow,
    "=>"        => lex::Token::DoubleArrow,
    "*"         => lex::Token::Mul,
    "infix6"    => lex::Token::Infix6(<&'a str>),
    "infix4"    => lex::Token::Infix4(<&'a str>),
    "infix3"    => lex::Token::Infix3(<&'a str>),
    "eid"       => lex::Token::ExpId(<&'a str>),
    "tid"       => lex::Token::TypId(<&'a str>),
    "intLit"    => lex::Token::IntLit(<i64>),
    "boolLit"   => lex::Token::BoolLit(<bool>),
    "unitLit"   => lex::Token::UnitLit,
    "if"        => lex::Token::If,
    "then"      => lex::Token::Then,
    "else"      => lex::Token::Else,
    "let"       => lex::Token::Let,
    "in"        => lex::Token::In,
    "match"     => lex::Token::Match,
    "with"      => lex::Token::With,
    "end"       => lex::Token::End,
    "any"       => lex::Token::Any,
    "lambda"    => lex::Token::Lambda,
    "forall"    => lex::Token::Forall,
    "Int"       => lex::Token::TInt,
    "Bool"      => lex::Token::TBool,
    "Unit"      => lex::Token::TUnit
  }
}

pub Prog: ast::Prog = {
    <ds: Decl+> => {
        let mut m = Prog::new();
        for d in ds {
            m.insert(d.id.to_string(), d);
        }
        m
    }
}

pub Decl: ast::Decl = {
    "let" <v: "eid"> ":" <t: TypExpr> "=" <e: ValExpr> =>
        ast::Decl{ id: v.to_string(),
                   sig: t,
                   body: e }
}

//////////////////////////////////////////////////
///////////////////// EXPR ///////////////////////
//////////////////////////////////////////////////

pub ValExpr: Expr = {
    <e: ValExpr2> => e,
    <e: ValExprIf> => e,
    <e: ValExprLet> => e,
    <e: ValExprMatch> => e
}

ValExprIf: ast::Expr = {
    "if" <e1: ValExpr> "then" <e2: ValExpr> "else" <e3: ValExpr> =>
        Expr::new(ast::RawExpr::If{
            cond: Box::new(e1),
            t: Box::new(e2),
            f: Box::new(e3)
        })
}

ValExprLet: ast::Expr = {
    "let" <a: Annot> "=" <e1: ValExpr> "in" <e2: ValExpr> =>
        Expr::new(ast::RawExpr::Let{
            annot: a,
            exp: Box::new(e1),
            body: Box::new(e2)
        })
}

ValExprMatch: ast::Expr = {
    "match" <e: ValExpr> "with" <c: Pattern> "=>" <b: ValExpr> "end" =>
        Expr::new(RawExpr::Match{
            exp: Box::new(e),
            clause: (c, Box::new(b))
        })
}


///////////// Precedence babyyyy /////////////

// Lambda and forall. Expression body extends as far as possible
ValExpr2: ast::Expr = {
    "lambda" <a: Sep<Annot, ",">> "." <e: ValExpr> =>
         Expr::new(RawExpr::Lambda{
             args: a,
             body: Box::new(e)
         }),
    "any" <a: TypVar> "." <e: ValExpr> =>
         Expr::new(RawExpr::Any{
             poly: a,
             body: Box::new(e),
         }),
    <e: ValExpr3> => e
}

// Binops with && ||, precedence 3, left assoc
ValExpr3: ast::Expr = {
    <l: ValExpr3> <o: "infix3"> <r:ValExpr4> => utils::make_binop(l, o, r),
    <e: ValExpr4> => e
}

// Binops with < > == !=, precedence 4, left assoc
ValExpr4: ast::Expr = {
    <l: ValExpr4> <o: "infix4"> <r: ValExpr6> => utils::make_binop(l, o, r),
    <e: ValExpr6> => e
}

// Binops with + -, precedence 6, left assoc
ValExpr6: ast::Expr = {
    <l: ValExpr6> <o: "infix6"> <r: ValExpr7> => utils::make_binop(l, o, r),
    <e: ValExpr7> => e
}

// Binops with *, precedence 7, left assoc
ValExpr7: ast::Expr = {
    <l: ValExpr7> "*" <r: ValExpr8> => utils::make_binop(l, "*", r),
    <e: ValExpr8> => e
}

// Application, precedence 8, left assoc
ValExpr8: ast::Expr = {
    // Expression application
    <e1: ValExpr8> <e2: ValExprAtom> =>
        Expr::new(RawExpr::EApp{
            exp: Box::new(e1),
            arg: Box::new(e2)
        }),
    // Type application
    <e: ValExpr8> "[" <t: TypExpr> "]" =>
        Expr::new(RawExpr::TApp{
            exp: Box::new(e),
            arg: t,
        }),
    <e: ValExprAtom> => e
}


// Atomic expressions have no ambiguities. Highest precedence
ValExprAtom: ast::Expr = {
    "intLit" =>
        Expr::new(RawExpr::Con{
            val: ast::Constant::Integer(<>),
        }),
    "boolLit" =>
        Expr::new(RawExpr::Con{
            val: ast::Constant::Boolean(<>),
        }),
    "unitLit" =>
        Expr::new(RawExpr::Con{
            val: ast::Constant::Null,
        }),
    "eid" =>
        Expr::new(RawExpr::Var{
            id: <>.to_string()
        }),
    "(" <es: SepMulti<ValExpr, ",">> ")" =>
        Expr::new(RawExpr::Tuple{
            entries: es
        }),
    "(" <e: ValExpr> ")" => e,
}

//////////////////////////////////////////////////
///////////////////// TYPE ///////////////////////
//////////////////////////////////////////////////

pub TypExpr: ast::Typ = {
    <t: TypExprForall> => t
}

TypExprForall: ast::Typ = {
    "forall" <t: "tid"> "." <te: TypExpr> =>
        ast::Typ::Forall(t.to_string(), Box::new(te)),
     <t: TypExprArrow> => t
}

TypExprArrow: ast::Typ = {
    <t1: TypExprProd> "->" <t2: TypExprArrow> =>
        ast::Typ::Arrow(Box::new(t1), Box::new(t2)),
    <t: TypExprProd> => t
}

TypExprProd: ast::Typ = {
    <ts: Sep<TypExprAtom, "*">> =>
        ast::Typ::Prod(ts)
}

TypExprAtom: ast::Typ = {
    "Int" => ast::Typ::Int,
    "Bool" => ast::Typ::Bool,
    "Unit" => ast::Typ::Unit,
    <v: TypVar> => ast::Typ::TVar(v),
    "(" <t: TypExpr> ")" => t
}

TypVar: String = {
    <t: "tid"> => t.to_owned()
}


///////////// HELPERS //////////////
// One or more T's separated by S's
Sep<T, S>: Vec<T> = {
    <sep: SepMulti<T, S>> => sep,
    <atom: T> => vec![atom]
}

// Two or more T's separated by S's
SepMulti<T, S>: Vec<T> = {
    <l: (<T> S)+> <r: T> =>
        { let mut l = l; l.push(r); l }
}


// Pattern
Pattern: ast::Pattern = {
    "(" <multi: SepMulti<Pattern, ",">> ")" =>
        ast::Pattern::Tuple(multi),
    "(" <a: "eid"> ")" =>
        ast::Pattern::Var(a.to_string())
}


// Type annotated identifier.
Annot: ast::Annot = {
    <v1: "eid"> ":" <t: TypExpr> =>
        ast::Annot{ var: v1.to_string(),
                    typ: t }
}

//////////// END HELPERS /////////////