use crate::sml::{ast, lex, parse::utils};

grammar<'a>;

//Using tokens from Logos
extern {
  type Location = usize;
  type Error = lex::LexicalError;
  enum lex::Token<'a> {
    ":"     => lex::Token::Colon,
    ","	    => lex::Token::Comma,
    "->"    => lex::Token::Arrow,
    "=>"    => lex::Token::TwoArrow,
    "("	    => lex::Token::LParen,
    ")"	    => lex::Token::RParen,
    "="	    => lex::Token::Equal,
    "*"	    => lex::Token::Mul,
    "infix3"=> lex::Token::Infix3(<&'a str>),
    "infix4"=> lex::Token::Infix4(<&'a str>),
    "infix6"=> lex::Token::Infix6(<&'a str>),
    "ident" => lex::Token::Ident(<&'a str>),
    "typVar"=> lex::Token::TypVar(<&'a str>),
    "intLit"   => lex::Token::IntLit(<i64>),
    "boolLit"  => lex::Token::BoolLit(<bool>),
    "if"    => lex::Token::If,
    "then"  => lex::Token::Then,
    "else"  => lex::Token::Else,
    "val"   => lex::Token::Val,
    "rec"   => lex::Token::Rec,
    "let"   => lex::Token::Let,
    "in"    => lex::Token::In,
    "end"   => lex::Token::End,
    "fn"    => lex::Token::Fn,
    "int"   => lex::Token::TInt,
    "bool"  => lex::Token::TBool,
    "error" => lex::Token::Error
  }
}

pub Prog: ast::Prog = {
    <bs: ValBind*> => bs
}

pub ValBind: ast::ValBind = {
    "val" <r: "rec"?> <v: "ident"> "=" <e: ValExpr> =>
        ast::ValBind { id: v.to_string(), exp: e, rec: r.is_some() }
}

pub ValExpr: ast::Expr = {
    <e: ValExpr2> => e,
    <e: ValExprIf> => e
}

ValExprIf: ast::Expr = {
    "if" <e1: ValExpr> "then" <e2: ValExpr> "else" <e3: ValExpr> =>
    	 ast::Expr::Branch{ cond: Box::new(e1),
	 		    br_t: Box::new(e2),
			    br_f: Box::new(e3),
			    typ:  ast::Typ::Unknown }
}

ValExprLet: ast::Expr = {
    "let" <bs: ValBind*> "in" <e: ValExpr> "end" =>
    	  ast::Expr::Let{ bindings: bs,
	  		  body: Box::new(e),
			  typ: ast::Typ::Unknown }
}

//////// Precedence babyyyy ////////

// Lambda expressions. Expression body extends as far as possible
ValExpr2: ast::Expr = {
    "fn" <p: Pattern> "=>" <e: ValExpr> =>
    	 ast::Expr::Lambda{ args: p,
	 		    body: Box::new(e),
			    /// foralls: vec![],
			    typ:  ast::Typ::Unknown },
    <e: ValExpr3> => e
}

// Binops with andalso orelse, precedence 3, left assoc
ValExpr3: ast::Expr = {
    <l: ValExpr3> <o: "infix3"> <r:ValExpr4> => utils::make_binop(l, o, r),
    <e: ValExpr4> => e
}

// Binops with < > <= >= = <>, precedence 4, left assoc
ValExpr4: ast::Expr = {
    <l: ValExpr4> <o: "infix4"> <r: ValExpr6> => utils::make_binop(l, o, r),
    <l: ValExpr4> "=" <r: ValExpr6> => utils::make_binop(l, "=", r),
    <e: ValExpr6> => e
}

// Binops with + -, precedence 6, left assoc
ValExpr6: ast::Expr = {
    <l: ValExpr6> <o: "infix6"> <r: ValExpr7> => utils::make_binop(l, o, r),
    <e: ValExpr7> => e
}

// Binops with *, precedence 7, left assoc
ValExpr7: ast::Expr = {
    <l: ValExpr7> "*" <r: ValExpr8> => utils::make_binop(l, "*", r),
    <e: ValExpr8> => e
}

//Function application, precedence 8, left assoc
ValExpr8: ast::Expr = {
    <e1: ValExpr8> <e2: ValExprAtom> =>
        ast::Expr::App{ fun: Box::new(e1),
			arg: Box::new(e2),
			/// foralls: vec![],
			typ: ast::Typ::Unknown },
    <e: ValExprAtom> => e
}

////////////////////////////////////

///////////// Helpers //////////////

// Two or more T separated by commas
CommaSepMulti<T>: Vec<T> = {
    <l: CommaSepMulti<T>> "," <r: T> => { let mut l = l; l.push(r); l },
    <l: T> "," <r: T> => vec![l, r]
}

Pattern: Vec<ast::Annot> = {
    "(" <multi: CommaSepMulti<Annot>> ")" => multi,
    "(" <a: Annot> ")" => vec![a],
    "(" ")" => vec![]
}

// Type annotated identifier.
Annot: ast::Annot = {
    <v1: "ident"> ":" <t: TypExpr> =>
    	 ast::Annot{ var: v1.to_string(),
	 	     typ: t }
}

////////////////////////////////////

// Atomic expressions have no ambiguities. Highest precedence
ValExprAtom: ast::Expr = {
    "intLit" =>
    	ast::Expr::Con{ constnt: ast::Constant::Integer(<>),
    	     		typ: ast::Typ::Unknown },
    "boolLit" =>
    	ast::Expr::Con{ constnt: ast::Constant::Boolean(<>),
    	     		typ: ast::Typ::Unknown },
    "ident" =>
        ast::Expr::Var{ id: <>.to_string(),
	                typ: ast::Typ::Unknown },
    "(" <es: CommaSepMulti<ValExpr>> ")" =>
    	ast::Expr::Tuple{ entries: es,
			  typ: ast::Typ::Unknown },
    "(" <e: ValExpr> ")" => e,
}


///////////////////////////////////////////////////
///////////////////////////////////////////////////
///////////////////////////////////////////////////
///////////////////////////////////////////////////

TypExpr: ast::Typ = {
    <t: TypExprArrow> => t
}

TypExprArrow: ast::Typ = {
    <t1: TypExprProdOrAtom> "->" <t2: TypExprArrow> =>
    	 ast::Typ::Arrow(Box::new(t1), Box::new(t2)),
    <t: TypExprProdOrAtom> => t
}

TypExprProdOrAtom: ast::Typ = {
    <t: TypExprProd> => t,
    <t: TypExprAtom> => t
}

TypExprProd: ast::Typ = {
    <ts: TypExprProdHelp> => ast::Typ::Prod(ts)
}

TypExprProdHelp: Vec<ast::Typ> = {
    <ts: TypExprProdHelp> "*" <t: TypExprAtom> =>
    	 { let mut ts = ts; ts.push(t); ts },
    <t1: TypExprAtom> "*" <t2: TypExprAtom> =>
    	 vec![t1, t2]
}

TypExprAtom: ast::Typ = {
    "int" => ast::Typ::Int,
    "bool" => ast::Typ::Bool,
    "(" <t: TypExpr> ")" => t
    // <tv: "typVar"> =>
    //	 if <>.starts_with("''") {
    //	     ast::Typ::PolyEq(<>.to_string())
    //	 } else {
    //	     ast::Typ::Poly(<>.to_string())
    //	 }
}